/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.1.7' (BDS version 1.0.2043.0) */

#ifndef BLE_ADCONVERT_SERVICE_H__
#define BLE_ADCONVERT_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif  //__cplusplus

#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief ADconvert service event type. */
typedef enum
{ 
    BLE_ADCONVERT_SERVICE_ADVALUE_EVT_NOTIFICATION_ENABLED,  /**< ADvalue value notification enabled event. */
    BLE_ADCONVERT_SERVICE_ADVALUE_EVT_NOTIFICATION_DISABLED, /**< ADvalue value notification disabled event. */
    BLE_ADCONVERT_SERVICE_ADVALUE_EVT_CCCD_WRITE, /**< ADvalue CCCD write event. */
} ble_adconvert_service_evt_type_t;

// Forward declaration of the ble_adconvert_service_t type.
typedef struct ble_adconvert_service_s ble_adconvert_service_t;








/**@brief ADvalue structure. */
typedef struct
{
    uint16_t advalue;
} ble_adconvert_service_advalue_t;

/**@brief ADconvert service Service event. */
typedef struct
{
    ble_adconvert_service_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
    } params;
} ble_adconvert_service_evt_t;

/**@brief ADconvert service Service event handler type. */
typedef void (*ble_adconvert_service_evt_handler_t) (ble_adconvert_service_t * p_adconvert_service, ble_adconvert_service_evt_t * p_evt);

/**@brief ADconvert service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_adconvert_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the ADconvert service Service. */
    ble_adconvert_service_advalue_t ble_adconvert_service_advalue_initial_value; /**< If not NULL, initial value of the ADvalue characteristic. */ 
} ble_adconvert_service_init_t;

/**@brief ADconvert service Service structure. This contains various status information for the service.*/
struct ble_adconvert_service_s
{
    ble_adconvert_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the ADconvert service Service. */
    uint16_t service_handle; /**< Handle of ADconvert service Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t advalue_handles; /**< Handles related to the ADvalue characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the ADconvert service.
 *
 * @param[out]  p_adconvert_service       ADconvert service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_adconvert_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_adconvert_service_init(ble_adconvert_service_t * p_adconvert_service, const ble_adconvert_service_init_t * p_adconvert_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_adconvert_service_on_ble_evt(ble_adconvert_service_t * p_adconvert_service, ble_evt_t * p_ble_evt);

/**@brief Function for setting the ADvalue.
 *
 * @details Sets a new value of the ADvalue characteristic. The new value will be sent
 *          to the client the next time the client reads the ADvalue characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_adconvert_service                 ADconvert service Service structure.
 * @param[in]   p_advalue  New ADvalue.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_adconvert_service_advalue_set(ble_adconvert_service_t * p_adconvert_service, ble_adconvert_service_advalue_t * p_advalue);

/**@brief Function for sending the ADvalue.
 *
 * @details The application calls this function after having performed a advalue.
 *          The advalue data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_adconvert_service                    ADconvert service Service structure.
 * @param[in]   p_advalue               New advalue.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_adconvert_service_advalue_send(ble_adconvert_service_t * p_adconvert_service, ble_adconvert_service_advalue_t * p_advalue);

#ifdef __cplusplus
}
#endif  //__cplusplus

#endif //_BLE_ADCONVERT_SERVICE_H__
